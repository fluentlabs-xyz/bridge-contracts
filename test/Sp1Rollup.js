const { expect } = require("chai");
const { sleep } = require("@nomicfoundation/hardhat-verify/internal/utilities");


describe("Sp1Rollup.sol", function () {
  let rollup;

  before(async function () {
    const Verifier = await ethers.getContractFactory("SP1Verifier");
    let verifier = await Verifier.deploy();

    console.log("Verifier: ", verifier.target)

    const RollupContract = await ethers.getContractFactory("Sp1Rollup");
    const vkKey = "0x00612f9d5a388df116872ff70e36bcb86c7e73b1089f32f68fc8e0d0ba7861b7"
    const genesisHash = "0xd860e48c1f1644c9e6ca9869006c2e272e04dc3cb05a577342dce721287fc869";
    rollup = await RollupContract.deploy(10000,0,1, verifier.target, vkKey, genesisHash, "0x0000000000000000000000000000000000000000");

    await rollup.setDaCheck(false)
  });

  it("Accept proof", async function () {
    const accounts = await hre.ethers.getSigners();
    const rollupContractWithSigner = rollup.connect(accounts[0]);

    let blockNumber = await rollupContractWithSigner.lastBlockNumber();

    expect(await rollupContractWithSigner.acceptedBlock(blockNumber + 1n)).to.eq(false);
    expect(await rollupContractWithSigner.approvedBlock(blockNumber + 1n)).to.eq(false);

    let rlpBlockHeader = "0xf90272a0d860e48c1f1644c9e6ca9869006c2e272e04dc3cb05a577342dce721287fc869a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794656f06906fe583bfaaa2ddc4e908eaddb264c8cea0e0580b99b1a20b9b0d42530e4aae4122e39b60bd5291393db06352090746351fa0e0fba237876e7664ac5c0c6b1992ea7ffb702790d9da7ff9d6df0736f4442e6da0f78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efabca35ef8252088467e201e891726574682f76312e322e302f6c696e7578a007940a9cb5d2191e41dc88b3f5cf92347eaa703db1c55920da4d07fe7726ebd788000000000000000084342770c0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a01691a4e3f5a6d0317e58cc7bcd416e575a6d932472711977d5aad599286709c0a0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";

    await rollupContractWithSigner.acceptNextBlock(
        rlpBlockHeader,
        "0x"
    );

    let newblockNumber = await rollupContractWithSigner.lastBlockNumber();
    expect(newblockNumber).to.eq(blockNumber + 1n);
    expect(await rollupContractWithSigner.acceptedBlock(newblockNumber)).to.eq(true);
  });


  it("Proof check", async function () {
    const accounts = await hre.ethers.getSigners();
    const rollupContractWithSigner = rollup.connect(accounts[0]);

    let rlpBlockHeader = "0xf90272a0a45355df8214ba09ce650b746bd61f4d3f926d2ed4c75c42f55aedf9a92acfe0a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479492e9662b18556a98ecc21a5b6e54a8d2fb87492aa013d2fa224245679681323f795c9613f004c6dbf026c9addbd3e9a0ef7f131bd8a044382acb21be55afa053e406c3e9d57ed56e971b0abe3eb07113f77b7d30e515a0f78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efabcaa87b8252088467f37d6791726574682f76312e322e302f6c696e7578a007ea846ae8548f7abe5a19ffa002f48ce1ab1e0cbfbb54e11a3bbf929b985859880000000000000000842da4d838a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0460883d27fd0a7f0a9ea2870f7ea20ac5dfcc0dd0ba81dd12ff3c00f97332442a0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";

    await rollupContractWithSigner.acceptNextBlock(
        rlpBlockHeader,
        "0x"
    );

    await sleep(2000)
    let newblockNumber = await rollupContractWithSigner.lastBlockNumber();

    rlpBlockHeader = "0xf90272a01aae15e5cc07fc4b20f5d6609767678b45b367d3516d2359744bc7da8fb29db8a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794b3467107a50ed758f0c5da505f54d30417e1fe00a023deee2ecce08f2a9f2511c9193828ac2efe3176ab0d3114611397e77e787ac8a009422c4938d234e917454a7a03371cd7f35a48681d7906f34a4c26beb9d7fc15a0f78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efabcb1b248252088467f37d9791726574682f76312e322e302f6c696e7578a01bb151602680a311deb5a89fac1243e7bb0f1bd568d5f6758a5c5834b5cdbf628800000000000000008427f247a7a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0ee18a678daa65670a7b2dce25a1542686a65a2fda14233efda7ad12bbbc8a92ca0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";



    await rollupContractWithSigner.acceptNextBlock(
        rlpBlockHeader,
        "0x"
    );

    expect(await rollupContractWithSigner.approvedBlock(1)).to.eq(true);

    let challenge = await rollupContractWithSigner.getChallengeQueue();

    let challengeLen = challenge.length

    await rollupContractWithSigner.challengeBlock(
        newblockNumber + 1n, {
          value: 10000
        }
    );

    challenge = await rollupContractWithSigner.getChallengeQueue();
    expect(challenge.length).to.eq(1);

    await rollupContractWithSigner.proofBlock(newblockNumber + 1n, "0x11b6a09d2c70b2e4fb214226fd0106a590dca00c2a0ec62e34e7ffdd11c788703fc26d61035980a75458baf4393fdf65478f94d960953de6fd03f31fc868c8c93087c8662e985b53c4ac8502c1f917bb20968844d0d55eda08ed5d6144b4e5feaa8e444d103a3f3230489985fa76eb73f89fef51d2f7c5e0c184be7ab74f1c9640e6651618f259ab8d0616b26ff75ccfea92f789502b89892a6fb67ec47932f8f575d2a912ea41c5f75e0440efce92e9dc9cc43647989cd570404e88f757318e2ae5696a24cf008895debedf7735532ecaae629ff1a636493476f0cdf8aa7e05f4b792a7180e9a7f185b545461e083e9997b0a8fe3e1fe85cda87da247a07edc043c4a6e");

    challenge = await rollupContractWithSigner.getChallengeQueue()

    expect(challenge.length).to.eq(challengeLen);
  });

  it("Revert check", async function () {
    const accounts = await hre.ethers.getSigners();
    const rollupContractWithSigner = rollup.connect(accounts[0]);

    let newblockNumber = await rollupContractWithSigner.lastBlockNumber();
    console.log("Revert: ", newblockNumber);
    await rollupContractWithSigner.acceptNextBlock(
        "0xf90272a08688ce054c205a697f248c50c007ef1068d5de74a96326e59d02eed22773fc96a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347949a9bd43e6aa1568f22bbcc3ed623b185b183790da07288496e384be0dd27580db9cbfac1ffca722ebe7835710b89a658dc19e86453a06caa61cee56f6310fc8c510461628b0a80bd43ebfaa477e07c5758da25446b07a0f78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efabcb8de98252088467f3861e91726574682f76312e322e302f6c696e7578a0ded0b3ae0f545008424ae4d530cbdf8ee47f7c9210a19136143d4c9bbd60b3a38800000000000000008422f5c77fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0b0c3903599d6fe12993ec1b5abe0ba7decf058db33ff94266562f39f91f9e873a0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "0x"
    );

    expect(await rollupContractWithSigner.approvedBlock(1)).to.eq(true);

    await rollupContractWithSigner.challengeBlock(
        newblockNumber + 1n, {
          value: 10000
        }
    );

    expect(await rollupContractWithSigner.rollupCorrupted()).to.eq(false);

    await sleep(2000)

    await accounts[0].sendTransaction(
        {
          to: accounts[1].address,
          value: 10
        }
    )

    expect(await rollupContractWithSigner.rollupCorrupted()).to.eq(true);

    await rollupContractWithSigner.forceRevertBlock(newblockNumber + 1n)

    expect(await rollupContractWithSigner.rollupCorrupted()).to.eq(false);
  });

  it("Corrupted check", async function () {
    const accounts = await hre.ethers.getSigners();
    const rollupContractWithSigner = rollup.connect(accounts[0]);

    let newblockNumber = await rollupContractWithSigner.lastBlockNumber();
    console.log("corrupt: ", newblockNumber);
    await rollupContractWithSigner.acceptNextBlock(
        "0xf90272a08688ce054c205a697f248c50c007ef1068d5de74a96326e59d02eed22773fc96a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347949a9bd43e6aa1568f22bbcc3ed623b185b183790da07288496e384be0dd27580db9cbfac1ffca722ebe7835710b89a658dc19e86453a06caa61cee56f6310fc8c510461628b0a80bd43ebfaa477e07c5758da25446b07a0f78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efabcb8de98252088467f3861e91726574682f76312e322e302f6c696e7578a0ded0b3ae0f545008424ae4d530cbdf8ee47f7c9210a19136143d4c9bbd60b3a38800000000000000008422f5c77fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0b0c3903599d6fe12993ec1b5abe0ba7decf058db33ff94266562f39f91f9e873a0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "0x"
    );

    expect(await rollupContractWithSigner.approvedBlock(1)).to.eq(true);

    await rollupContractWithSigner.challengeBlock(
        newblockNumber + 1n, {
          value: 10000
        }
    );

    expect(await rollupContractWithSigner.rollupCorrupted()).to.eq(false);

    await sleep(2000)

    await accounts[0].sendTransaction(
        {
          to: accounts[1].address,
          value: 10
        }
    )

    expect(await rollupContractWithSigner.rollupCorrupted()).to.eq(true);
  });
});
